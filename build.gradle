plugins {
    id "eclipse"
    id "idea"
    id "maven-publish"
    alias(libs.plugins.forgegradle)
    alias(libs.plugins.librarian)
    alias(libs.plugins.mixingradle)
    alias(libs.plugins.mdg)
}

modsDotGroovy {
    dslVersion = libs.versions.mdg.dsl.get()
    platform = "forge"
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

sourceSets {
    main
    datagen {
        compileClasspath += main.compileClasspath + main.output
        runtimeClasspath += main.runtimeClasspath + main.output
    }
}

java.toolchain.getLanguageVersion().set(JavaLanguageVersion.of(17))

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property "forge.enabledGameTestNamespaces", mod_id
        }

        server {
            property "forge.enabledGameTestNamespaces", mod_id
            args "--nogui"
        }

        gameTestServer {
            property "forge.enabledGameTestNamespaces", mod_id
        }

        data {
            workingDirectory project.file("run")

            args "--mod", mod_id, "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.datagen
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, mod_id + ".refmap.json"
    config mod_id + ".mixins.json"

    debug.verbose = true
    debug.export = true
}

sourceSets.main.resources { srcDir "src/generated/resources" }

dependencies {
    minecraft(libs.forge)

    annotationProcessor(libs.mixin.processor)
}

tasks.named("processResources", ProcessResources).configure {
    exclude(".cache", "mods.groovy")
}

java {
    withSourcesJar()
    withJavadocJar()
}

sourcesJar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${mod_id}" }
    }
}

tasks.named("jar", Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy "reobfJar"
}

publishing {
    publications {
        register("mavenJava", MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.getRelease().set(17)
}
